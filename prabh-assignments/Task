a. Add Comparison Operators:
Extend the Dunderp class by implementing the following comparison dunder methods:

__lt__: Less than (<)
__le__: Less than or equal to (<=)
__eq__: Equal to (==)
__ne__: Not equal to (!=)
__gt__: Greater than (>)
__ge__: Greater than or equal to (>=)
b. Add Arithmetic Operators:
Implement the following arithmetic dunder methods in the Dunderp class:

__add__: Addition (+)
__sub__: Subtraction (-)
__mul__: Multiplication (*)
__truediv__: Division (/)
These methods should allow mathematical operations between two Dunderp objects or between a Dunderp object and an integer/float.

c. Add a Custom Representation:
Modify the __repr__ method to provide a more detailed string representation of the object, including its class name and value.

d. Test the Class:
Write a Python script to:

Create multiple instances of the Dunderp class.
Demonstrate the use of all implemented dunder methods.
Print results for each operation.


sample output :
obj1 = Dunderp(10)
obj2 = Dunderp(20)

print(obj1)  # Value 10
print(obj2)  # Value 20

print(obj1 + obj2)  # 30
print(obj1 * 3)     # 30
print(obj1 > obj2)  # False
print(repr(obj1))   # Dunderp(value=10)
